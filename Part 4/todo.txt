Current Issues:

- assumption: servers that go down go down forever
    - no revival policy

- threading to deal with multicast / multiresponse

----

Things That Work:

- multiple data servers / multiple data
- total ordering and message numbers
- getting the same queries to/from the different data servers
- consistency amongst alive data servers

- turns out the following two errors were related to the same thing
    - weird server starting issue
    - port list doesn't always clear all ports
    - issue: deleting element while iterating through loop
        - solution: just iterate through it backwards

--------------------

Current Assignment:

Provide clear documentation describing:

how the data is kept in synch across your replicas.
    - active replication (via the textbook)
    - all queries sent to all alive data servers
    - total ordering
how failure of one server is handled by the system.
    - just dropped out of the system
    - check on connection; catch exception; don't connect if dead
    - no revival policy
        - assumes they do not come back to life and try to reconnect

--------------------

Python Web Server is the "front end"
C++ Data Server is the "Replica Manager"

https://en.wikipedia.org/wiki/State_machine_replication
https://jaksa.wordpress.com/2009/05/01/active-and-passive-replication-in-distributed-systems/

Active Replication:
    - have many data servers all running at the same time
    - each data server must keep track of its own replicate of the information
    - each data server must get the same information and respond in the same ways (Lamport's determinism)
    - have web server keep track of all possible data servers that can possibly be connected to (on different ports)
    - web server will send the *same* information to all active data servers
        - Lamport calls this an *atomic broadcast*

    - what if a data server goes down?
        - kill it forever and don't deal with setting it back up
        Q - other option (better but more difficult): connect back to it, but need to update it since downtime

    - web server checks to see if someone is alive when connecting to make a query
        - if that server is dead, then drop it out of the list of things to connect to in the future

    - server socket connections are done over TCP, so we're guaranteed in-order delivery to all data servers
    - if the data server is still alive, we're guaranteed that it will receive all of the messages

Total Ordering:
    - if multiple users are active and the client issues different queries at the same time:
        server 1 may get A B C and server 2 may get C B A
    - will enforce total ordering using message numbers
        - each data server will check the expected message number against the received message number
        - will use a condition variable to block until the expected message number matches current msgnum

--------------------

Things to Keep Track Of:

- latency (should be relatively quick to access the data)
- consistency (all data servers should have the same data)
- network overhead (don't send too many messages)

--------------------

Book Solution:

1 - front end multicasts request with unique identifier to replica managers
    - must use totally ordered, reliable multicast
        - order and reliability guaranteed by TCP
        - what about multicast?
    - do not request again until it receives a response

2 - coordination - enforce total order

3 - execution - RM's all process query identically

4 - agreement - none needed!

5 - response - ALL RM's send response
    - FE takes first response it receives and discards the rest (uses identifier)
    - all *must* send response, with identifier

- has sequential consistency
- relies on reliable multicast to ensure total order and same queries received at all RMs
- front end's requests are served in FIFO order (since must wait for a response)

--------------------

From long ago:

- include some sort of timestamps for messages
- consider having a way to see who you're being followed by
