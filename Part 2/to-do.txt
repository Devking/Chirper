1. remove manifest from python
2. set up client connection using python
3. serve user information using cpp
4. write API for client-server calls

------

1 file for list of users
1 file for each user
1 file for list of emails

------

we do a file read on *every* request, because
we do not want to store all of the user data
in memory and potentially cause a stack overflow!

------

client opens a connection for every request (not persistent)
we look through the file each time based on what the client requests

non-encryption

------

potential queries:

- check email                           CHKEML  email                           1
- check username                        CHKUSR  username                        2
- check password                        CHKPWD  username\npassword              3
- check friend                          CHKFND  username\nfriend
- create user                           CRTUSR  username\npassword\nemail       5
- delete user                           DELUSR  username\nemail                 6
- create chirp                          CRTCHP  username\nchirp
- delete chirp                          DELCHP  username\nchirpid
- add friend                            ADDFND  username\nfriend
- delete friend                         DELFND  username\nfriend
- populate                              POPLAT  username

later:
- reorder friends                       MOVEUP  username\nfriendid
                                        MOVEDN  username\nfriendid

first field: action
space
second field: username/email
newline
optional data field: friend name, chirp content, chirp id, whatnot

------

email file: csv of emails
	- emails only separated by commas, no spaces
	- need comma after last email as well!

------

user files will be in the 'users' directory
each users' file:

password\n
email\n
# of friends\n
friend1\n
friend2\n
# of chirps\n
chirp1\n
chirp2\n
